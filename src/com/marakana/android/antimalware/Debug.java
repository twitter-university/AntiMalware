
package com.marakana.android.antimalware;

import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.Set;

import android.content.Intent;
import android.content.pm.Signature;
import android.os.Bundle;
import android.util.Log;

public class Debug {

    public static void dump(String tag, Intent i) {
        Log.d(tag, "Intent:\n");
        Log.d(tag, "\taction=" + i.getAction());
        Log.d(tag, "\tdata=" + i.getDataString());
        Log.d(tag, "\tflags=" + i.getFlags());
        Log.d(tag, "\tpackage=" + i.getPackage());
        Log.d(tag, "\ttype=" + i.getType());
        Log.d(tag, "\tcomponent=" + i.getComponent());
        Set<String> categories = i.getCategories();
        if (categories != null) {
            for (String category : i.getCategories()) {
                Log.d(tag, "\tcategory=" + category);
            }
        }
        Bundle bundle = i.getExtras();
        if (bundle != null) {
            for (String key : bundle.keySet()) {
                Log.d(tag, "\textra:" + key + "=" + bundle.get(key));
            }
        }
    }

    public static void dump(String tag, String indentation, Object o)
            throws IllegalArgumentException, IllegalAccessException {
        if (o != null) {
            Class<?> clazz = o.getClass();
            for (Field field : clazz.getFields()) {
                if ((field.getModifiers() & Modifier.PUBLIC) != 0
                        && (field.getModifiers() & Modifier.STATIC) == 0) {
                    Class<?> fieldType = field.getType();
                    Object value = field.get(o);
                    if (value == null || fieldType.isPrimitive()
                            || fieldType.isAssignableFrom(String.class)) {
                        Log.d(tag, String.format("%s%s=%s", indentation, field.getName(), value));
                    } else if (fieldType.isArray()) {
                        Class<?> arrayComponentType = fieldType.getComponentType();
                        if (arrayComponentType.isPrimitive()
                                || arrayComponentType.isAssignableFrom(String.class)) {
                            for (int i = 0, l = Array.getLength(value); i < l; i++) {
                                Log.d(tag, String.format("%s%s[%d]=%s", indentation,
                                        field.getName(), i, Array.get(value, i)));
                            }
                        } else if (arrayComponentType.isAssignableFrom(Signature.class)) {
                            for (int i = 0, l = Array.getLength(value); i < l; i++) {
                                Log.d(tag, String.format("%s%s[%d]=%s", indentation,
                                        field.getName(), i,
                                        ((Signature)Array.get(value, i)).toCharsString()));
                            }
                        } else {
                            for (int i = 0, l = Array.getLength(value); i < l; i++) {
                                Log.d(tag,
                                        String.format("%s%s[%d]", indentation, field.getName(), i));
                                dump(tag, indentation + "\t", Array.get(value, i));
                            }
                        }
                    } else {
                        Log.d(tag, String.format("%s%s", indentation, field.getName()));
                        dump(tag, indentation + "\t", value);
                    }
                }
            }
        }
    }
}
